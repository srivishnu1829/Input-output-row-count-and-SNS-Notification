import sys
import json
import boto3
import datetime

from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job

message = """
ibcontract job  Load status
Start Time: {start_time}
File size: {file_size}
No. of input records: {record_count}
No. of valid records: {valid_record_count}
End Time: {end_time}
Total time taken: {total_time}"""

## @params: [JOB_NAME]
args = getResolvedOptions(sys.argv, ['JOB_NAME'])

sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
s3_client = boto3.client("s3")

job = Job(glueContext)
job.init(args['JOB_NAME'], args)
## @type: DataSource
## @args: [database = "ibcontractjsondatafroms3", table_name = "ibcontract_json", transformation_ctx = "datasource0"]
## @return: datasource0
## @inputs: []
#datasource0 = glueContext.create_dynamic_frame.from_catalog(database = "ibcontractjsondatafroms3", table_name = "ibcontract_json", transformation_ctx = "datasource0")

error_message = {}

try:
    start_time = datetime.datetime.now()

    glue_df = glueContext.create_dynamic_frame.from_options(
    's3',
    {"paths": ['s3://cp-prod-Contract.json']},
    "json")

    file_size = s3_client.head_object(Bucket='cp-prod-ds', Key='sftp_json/mndb/Contract.json')['ContentLength']
    record_count=glue_df.count()


## @type: ApplyMapping
## @args: [mapping = [("_id", "string", "_id", "string"), ("partyid", "string", "partyid", "string"), ("timecreated.$date", "string", "timecreated", "string"), ("timelastchanged.$date", "string", "timelastchanged", "string"), ("users", "array", "users", "string"), ("status", "string", "status", "string"), ("blockreason", "string", "blockreason", "string")], transformation_ctx = "applymapping1"]
## @return: applymapping1
## @inputs: [frame = datasource0]
    applymapping1 = ApplyMapping.apply(frame = glue_df, mappings = [
    ("_id", "string", "id", "long"),
    ("partyid", "string", "partyid", "string"),
    ("timecreated.$date", "string", "timecreated", "timestamp"),
    ("timelastchanged.$date", "string", "timelastchanged", "timestamp"),
    ("users", "array", "users", "string"),
    ("status", "string", "status", "string"),
    ("blockreason", "string", "blockreason", "string")], transformation_ctx = "applymapping1")
## @type: ResolveChoice
## @args: [choice = "make_cols", transformation_ctx = "resolvechoice2"]
## @return: resolvechoice2
## @inputs: [frame = applymapping1]
    resolvechoice2 = ResolveChoice.apply(frame = applymapping1, choice = "make_cols", transformation_ctx = "resolvechoice2")
## @type: DropNullFields
## @args: [transformation_ctx = "dropnullfields3"]
## @return: dropnullfields3
## @inputs: [frame = resolvechoice2]
    dropnullfields3 = DropNullFields.apply(frame = resolvechoice2, transformation_ctx = "dropnullfields3")
## @type: DataSink
## @args: [catalog_connection = "CP-PROD-RDS-AuroraDBMySQL", connection_options = {"dbtable": "ibcontract_json", "database": "cpdb"}, transformation_ctx = "datasink4"]
## @return: datasink4
## @inputs: [frame = dropnullfields3]

    db_properties={"user":"admi", "password": "889997"}
    dataDf    =   dropnullfields3.toDF()
    dataDf.write.option("truncate", "true").jdbc(url='jdbc:mysql://cp-prod-eu-west-1.rds.amazonaws.com:3306/cpdb', table='ibcontract', mode="overwrite", properties=db_properties)

    valid_record_count=dataDf.count()
    end_time = datetime.datetime.now()
    total_time = (end_time - start_time)


    print(message.format(start_time=str(start_time), end_time=str(end_time), total_time=str(total_time), record_count=record_count, valid_record_count=valid_record_count, file_size=file_size))


#datasink1 = glueContext.write_dynamic_frame.from_jdbc_conf(frame = dropnullfields3, catalog_connection = "CP-PROD-RDS-AuroraDBMySQL", connection_options = {"dbtable": "ibcontract", "database": "cdb"}, transformation_ctx = "datasink1")



    if rowcount_input == rowcount_output :
        print("counts are same")
    else:
         message = {"input count": rowcount_input, "output count": rowcount_output}
         client = boto3.client('sns', region_name='eu-west-1')
         response = client.publish(
         TargetArn="arn:aws:sns:eu-west-1:07:gluetest",
         Message=json.dumps({'default': json.dumps(message)}),
         Subject=' contract -Job Failed',
         MessageStructure='json'
          )

except Exception as e:
   error_message = {}
   error_message['error_messag'] = f'{e}'
   client = boto3.client('sns', region_name='eu-west-1')
   response = client.publish(
   TargetArn="arn:aws:sns:eu-west-1:07:gluetest",
   Message=json.dumps({'default': json.dumps( error_message)}),
   Subject=' contract -Job Failed',
   MessageStructure='json'
          )


